use std::str::FromStr;

use chrono::NaiveTime;

use crate::protocol::punch::DayOfWeek::Friday;
use crate::protocol::punch::StartOrFinishPunch::{Normal, SubSecond};
use crate::protocol::punch::WeekCounter::{First, Second, Third};
use crate::protocol::punch::{Punch, SubSecondPunch};
use crate::protocol::responses::card::CardType::Si10;
use crate::protocol::{CardOwnerData, CardReadout, FromCardBlocks};

#[tokio::test]
async fn empty() {
    let mut data = hex::decode("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef047d89deaeaeaea1b014f8aeeeeeeeeeeeeeeee00c400c40f6be4040a137b1c446166616e613b596f6765763b463b3b4c6576204861736861726f6e202d204d656e617368653b6461666e612e796f67657640676d61696c2e636f6d3b2b3937323532343738303536393b3b3b3b49737261656c3beeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee").unwrap();
    #[rustfmt::skip]
    let expected_data = CardReadout { card_number: 7070724, card_type: Si10, start: None, finish: None, check: Some(Punch { time: NaiveTime::from_str("17:39:22").unwrap(), day_of_week: Friday, week_counter: Second, code: 1 }), punches: vec![] };
    assert_eq!(
        CardReadout::from_card_blocks(&mut data, Si10)
            .await
            .unwrap(),
        expected_data
    );
}

#[tokio::test]
async fn only_finish() {
    let mut data = hex::decode("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef047d89deaeaeaea1b01503aeeeeeeee1b01503d00c400c40f6be4040a137b1c446166616e613b596f6765763b463b3b4c6576204861736861726f6e202d204d656e617368653b6461666e612e796f67657640676d61696c2e636f6d3b2b3937323532343738303536393b3b3b3b49737261656c3beeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee").unwrap();
    #[rustfmt::skip]
    let expected_data = CardReadout { card_number: 7070724, card_type: Si10, start: None, finish: Some(Normal(Punch { time: NaiveTime::from_str("17:42:21").unwrap(), day_of_week: Friday, week_counter: Second, code: 1 })), check: Some(Punch { time: NaiveTime::from_str("17:42:18").unwrap(), day_of_week: Friday, week_counter: Second, code: 1 }), punches: vec![] };
    assert_eq!(
        CardReadout::from_card_blocks(&mut data, Si10)
            .await
            .unwrap(),
        expected_data
    );
}

#[tokio::test]
async fn start_finish() {
    let mut data = hex::decode("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef047d89deaeaeaea1b014fc42b014fc51b014fcf00c400c40f6be4040a137b1c446166616e613b596f6765763b463b3b4c6576204861736861726f6e202d204d656e617368653b6461666e612e796f67657640676d61696c2e636f6d3b2b3937323532343738303536393b3b3b3b49737261656c3beeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee").unwrap();
    #[rustfmt::skip]
    let expected_data = CardReadout { card_number: 7070724, card_type: Si10, start: Some(Normal(Punch { time: NaiveTime::from_str("17:40:21").unwrap(), day_of_week: Friday, week_counter: Third, code: 1 })), finish: Some(Normal(Punch { time: NaiveTime::from_str("17:40:31").unwrap(), day_of_week: Friday, week_counter: Second, code: 1 })), check: Some(Punch { time: NaiveTime::from_str("17:40:20").unwrap(), day_of_week: Friday, week_counter: Second, code: 1 }), punches: vec![] };
    assert_eq!(
        CardReadout::from_card_blocks(&mut data, Si10)
            .await
            .unwrap(),
        expected_data
    );
}

#[tokio::test]
async fn full() {
    let mut data = hex::decode("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef047d89deaeaeaea1b0153262b0153221b0153ba7f2680e20f6be4040a137b1c446166616e613b596f6765763b463b3b4c6576204861736861726f6e202d204d656e617368653b6461666e612e796f67657640676d61696c2e636f6d3b2b3937323532343738303536393b3b3b3b49737261656c3beeeeeeeeeeeeeeeeeeeeee2b3f53282b4353282b3f53282b4353282b3f53282b4353282b3f53282b4353282b3f53282b4353282b3f53282b4353282b3f53282b4353282b3f53282b4353282b3f53282b4353282b3f53282b4353282b3f53282b4353282b3f53282b4353282b3f53282b4353282b3f532f2b4353282b3f532f2b4353282b3f532f2b4353282b3f532f2b4353282b3f532f2b4353282b3f532f2b4353282b3f532f2b4353282b3f532f2b4353282b3f532f2b4353282b3f532f2b4353282b3f532f2b4353282b3f532f2b4353282b3f532f2b4353282b3f532f2b4353282b3f532f2b4353282b3f532f2b4353282b3f532f2b4353282b3f532f2b4353282b3f532f2b4353282b3f532f2b4353282b3f532f2b4353282b3f53462b4353472b3f53462b4353472b3f53462b4353472b3f53462b4353472b3f53462b4353472b3f53462b4353472b3f53462b4353472b3f53462b4353472b3f53462b4353472b3f53462b4353472b3f53462b4353472b3f53462b4353472b3f53462b4353472b3f53462b4353472b3f53462b4353472b3f53462b4353472b3f53462b4353472b3f53462b4353472b3f53462b4353472b3f53462b4353472b3f53462b4353472b3f53462b4353472b3f535b2b4353472b3f535b2b4353472b3f535b2b4353472b3f535b2b4353472b3f535b2b4353472b3f535b2b4353472b3f535b2b4353472b3f535b2b435347").unwrap();
    #[rustfmt::skip]
    let expected_data = CardReadout { card_number: 7070724, card_type: Si10, start: Some(Normal(Punch { time: NaiveTime::from_str("17:54:42").unwrap(), day_of_week: Friday, week_counter: Third, code: 1 })), finish: Some(Normal(Punch { time: NaiveTime::from_str("17:57:14").unwrap(), day_of_week: Friday, week_counter: Second, code: 1 })), check: Some(Punch { time: NaiveTime::from_str("17:54:46").unwrap(), day_of_week: Friday, week_counter: Second, code: 1 }), punches: vec![Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:55").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:55").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:55").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:55").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:55").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:55").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:55").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:55").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:55").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:55").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:55").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:55").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:55").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:55").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:55").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:55").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:55").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:55").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:55").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:55").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:54:55").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:54:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:39").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:39").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:39").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:39").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:39").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:39").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:39").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:55:39").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:55:19").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }] };

    assert_eq!(
        CardReadout::from_card_blocks(&mut data, Si10)
            .await
            .unwrap(),
        expected_data
    );
}

#[tokio::test]
async fn half_full() {
    let mut data = hex::decode("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef047d89deaeaeaea1b0153f02b0153f71b0154373f3540d70f6be4040a137b1c446166616e613b596f6765763b463b3b4c6576204861736861726f6e202d204d656e617368653b6461666e612e796f67657640676d61696c2e636f6d3b2b3937323532343738303536393b3b3b3b49737261656c3beeeeeeeeeeeeeeeeeeeeee2b3f53f92b4353fa2b3f53f92b4353fa2b3f53f92b4353fa2b3f53f92b4353fa2b3f53f92b4353fa2b3f53f92b4353fa2b3f53f92b4353fa2b3f53f92b4353fa2b3f53f92b4353fa2b3f53f92b4353fa2b3f53f92b4353fa2b3f53f92b4353fa2b3f53f92b4353fa2b3f53f92b4353fa2b3f53f92b4353fa2b3f53f92b4353fa2b3f53f92b4353fa2b3f53f92b4353fa2b3f53f92b4353fa2b3f53f92b4353fa2b3f53f92b4353fa2b3f53f92b4353fa2b3f53f92b4353fa2b3f53f92b4354192b3f54192b4354192b3f54192b4354192b3f54192b4354192b3f54192b4354192b3f54192b4354192b3f54192b4354192b3f54192b4354192b3f54192b435419eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee").unwrap();
    #[rustfmt::skip]
    let expected_data = CardReadout { card_number: 7070724, card_type: Si10, start: Some(Normal(Punch { time: NaiveTime::from_str("17:58:15").unwrap(), day_of_week: Friday, week_counter: Third, code: 1 })), finish: Some(Normal(Punch { time: NaiveTime::from_str("17:59:19").unwrap(), day_of_week: Friday, week_counter: Second, code: 1 })), check: Some(Punch { time: NaiveTime::from_str("17:58:08").unwrap(), day_of_week: Friday, week_counter: Second, code: 1 }), punches: vec![Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:49").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:49").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:49").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:49").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:49").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:49").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:49").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:49").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:49").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:49").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:49").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:49").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:49").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:49").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:49").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("17:58:49").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("17:58:49").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }] };
    assert_eq!(
        CardReadout::from_card_blocks(&mut data, Si10)
            .await
            .unwrap(),
        expected_data
    );
}

#[tokio::test]
async fn only_start() {
    let mut data = hex::decode("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef047d89deaeaeaea1b0154562b015450eeeeeeee00c400c40f6be4040a137b1c446166616e613b596f6765763b463b3b4c6576204861736861726f6e202d204d656e617368653b6461666e612e796f67657640676d61696c2e636f6d3b2b3937323532343738303536393b3b3b3b49737261656c3beeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee").unwrap();
    #[rustfmt::skip]
    let expected_data = CardReadout { card_number: 7070724, card_type: Si10, start: Some(Normal(Punch { time: NaiveTime::from_str("17:59:44").unwrap(), day_of_week: Friday, week_counter: Third, code: 1 })), finish: None, check: Some(Punch { time: NaiveTime::from_str("17:59:50").unwrap(), day_of_week: Friday, week_counter: Second, code: 1 }), punches: vec![] };
    assert_eq!(
        CardReadout::from_card_blocks(&mut data, Si10)
            .await
            .unwrap(),
        expected_data
    );
}

#[tokio::test]
async fn sub_second() {
    let mut data = hex::decode("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef047d89deaeaeaea1b015a8c8bb05a878bcc5a8900c400c40f6be4040a137b1c446166616e613b596f6765763b463b3b4c6576204861736861726f6e202d204d656e617368653b6461666e612e796f67657640676d61696c2e636f6d3b2b3937323532343738303536393b3b3b3b49737261656c3beeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee").unwrap();
    #[rustfmt::skip]
    let expected_data = CardReadout { card_number: 7070724, card_type: Si10, start: Some(SubSecond(SubSecondPunch { time: NaiveTime::from_str("18:26:15.690").unwrap(), day_of_week: Friday, week_counter: First })), finish: Some(SubSecond(SubSecondPunch { time: NaiveTime::from_str("18:26:17.800").unwrap(), day_of_week: Friday, week_counter: First })), check: Some(Punch { time: NaiveTime::from_str("18:26:20").unwrap(), day_of_week: Friday, week_counter: Second, code: 1 }), punches: vec![] };
    assert_eq!(
        CardReadout::from_card_blocks(&mut data, Si10)
            .await
            .unwrap(),
        expected_data
    );
}

#[tokio::test]
async fn empty_owner_data() {
    let mut data = hex::decode("f047d89deaeaeaea1b015a8c8bb05a878bcc5a8900c400c40f6be4040a137b1c3b3b3b3b3b3b3b3b3b3b3bee3b463b3b4c6576204861736861726f6e202d204d656e617368653b6461666e612e796f67657640676d61696c2e636f6d3b2b3937323532343738303536393b3b3b3b49737261656c3beeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeebebebebeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef047d89deaeaeaea1b015a8c8bb05a878bcc5a8900c400c40f6be4040a137b1c3b3b3b3b3b3b3b3b3b3b3bee3b463b3b4c6576204861736861726f6e202d204d656e617368653b6461666e612e796f67657640676d61696c2e636f6d3b2b3937323532343738303536393b3b3b3b49737261656c3beeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee").unwrap();
    #[rustfmt::skip]
    let expected_data = CardOwnerData { first_name: "".to_string(), last_name: "".to_string(), gender: None, birthday: None, club: None, email: None, phone: None, city: None, street: None, zip: None, country: None };
    assert_eq!(
        CardOwnerData::from_card_blocks(&mut data, Si10)
            .await
            .unwrap(),
        expected_data
    );
}

#[tokio::test]
async fn normal_owner_data() {
    let mut data = hex::decode("f047d89deaeaeaea1c026dceeeeeeeee9c6373c30e620f7f0f6be4040a137b1c746573743b746573743b746573743b746573743b746573743b746573743b746573743b746573743b746573743b746573743b746573743bee2e636f6d3b2b3937323532343738303536393b3b3b3b49737261656c3beeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeebebebebeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef047d89deaeaeaea1c026dceeeeeeeee9c6373c30e620f7f0f6be4040a137b1c746573743b746573743b746573743b746573743b746573743b746573743b746573743b746573743b746573743b746573743b746573743bee2e636f6d3b2b3937323532343738303536393b3b3b3b49737261656c3beeeeeeeeeeeeeeeeeeeeee0c516faf1c1f6fe00c50703e0c44708a0c2c70ee0c2f71150c2371830c4671cc0c48720a0c4f72380c4e72800c3c72d60c2473500c4973721c647394eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee").unwrap();
    #[rustfmt::skip]
    let expected_data = CardOwnerData { first_name: "test".to_string(), last_name: "test".to_string(), gender: Some("test".to_string()), birthday: Some("test".to_string()), club: Some("test".to_string()), email: Some("test".to_string()), phone: Some("test".to_string()), city: Some("test".to_string()), street: Some("test".to_string()), zip: Some("test".to_string()), country: Some("test".to_string()) };
    assert_eq!(
        CardOwnerData::from_card_blocks(&mut data, Si10)
            .await
            .unwrap(),
        expected_data
    );
}

#[tokio::test]
async fn full_owner_data() {
    let mut data = hex::decode("f047d89deaeaeaea1c026dceeeeeeeee9c6373c30e620f7f0f6be4040a137b1c746573747465733b74657374746573743b746573743b74657374746573743b746573747465737474657374746573743b74657374746573747465737474657374746573743b74657374746573743b74657374746573743b74657374746573747465737474657374746573743b74657374746573743b74657374746573743beeeeeeeeeeeeeeeeeeeeeeeeeeeeebebebebeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef047d89deaeaeaea1c026dceeeeeeeee9c6373c30e620f7f0f6be4040a137b1c746573747465733b74657374746573743b746573743b74657374746573743b746573747465737474657374746573743b74657374746573747465737474657374746573743b74657374746573743b74657374746573743b7465737474657374740c516faf1c1f6fe00c50703e0c44708a0c2c70ee0c2f71150c2371830c4671cc0c48720a0c4f72380c4e72800c3c72d60c2473500c4973721c647394eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee").unwrap();
    #[rustfmt::skip]
    let expected_data = CardOwnerData { first_name: "testtes".to_string(), last_name: "testtest".to_string(), gender: Some("test".to_string()), birthday: Some("testtest".to_string()), club: Some("testtesttesttest".to_string()), email: Some("testtesttesttesttest".to_string()), phone: Some("testtest".to_string()), city: Some("testtest".to_string()), street: Some("testtesttesttesttest".to_string()), zip: Some("testtest".to_string()), country: Some("testtest".to_string()) };
    assert_eq!(
        CardOwnerData::from_card_blocks(&mut data, Si10)
            .await
            .unwrap(),
        expected_data
    );
}
