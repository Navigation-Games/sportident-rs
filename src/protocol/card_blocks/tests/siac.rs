use std::str::FromStr;

use chrono::NaiveTime;

use crate::protocol::punch::DayOfWeek::Friday;
use crate::protocol::punch::StartOrFinishPunch::{Normal, SubSecond};
use crate::protocol::punch::WeekCounter::{First, Second, Third};
use crate::protocol::punch::{Punch, SubSecondPunch};
use crate::protocol::responses::card::CardType::Siac;
use crate::protocol::{CardOwnerData, CardReadout, FromCardBlocks};

#[tokio::test]
async fn empty() {
    let mut data = hex::decode("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0940259feaeaeaea1a01a793eeeeeeeeeeeeeeee00c400c40f81c29101175d835368616861723b596f6765763b3b3b4c6576204861736861726f6e3b7368616861722e796f676576343740676d61696c2e636f6d3b2b3937323535393132343838353b3b3b3b49737261656c3beeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee").unwrap();
    #[rustfmt::skip]
    let expected_data = CardReadout { card_number: 8503953, card_type: Siac, start: None, finish: None, check: Some(Punch { time: NaiveTime::from_str("11:54:59").unwrap(), day_of_week: Friday, week_counter: Second, code: 1 }), punches: vec![] };
    assert_eq!(
        CardReadout::from_card_blocks(&mut data, Siac)
            .await
            .unwrap(),
        expected_data
    );
}

#[tokio::test]
async fn only_finish() {
    let mut data = hex::decode("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0940259feaeaeaea1a01a7f5eeeeeeee1a01a7fb00c400c40f81c29101175d835368616861723b596f6765763b3b3b4c6576204861736861726f6e3b7368616861722e796f676576343740676d61696c2e636f6d3b2b3937323535393132343838353b3b3b3b49737261656c3beeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee").unwrap();
    #[rustfmt::skip]
    let expected_data = CardReadout { card_number: 8503953, card_type: Siac, start: None, finish: Some(Normal(Punch { time: NaiveTime::from_str("11:56:43").unwrap(), day_of_week: Friday, week_counter: Second, code: 1 })), check: Some(Punch { time: NaiveTime::from_str("11:56:37").unwrap(), day_of_week: Friday, week_counter: Second, code: 1 }), punches: vec![] };
    assert_eq!(
        CardReadout::from_card_blocks(&mut data, Siac)
            .await
            .unwrap(),
        expected_data
    );
}

#[tokio::test]
async fn start_finish() {
    let mut data = hex::decode("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0940259feaeaeaea1a01a81a2a01a8161a01a82100c400c40f81c29101175d835368616861723b596f6765763b3b3b4c6576204861736861726f6e3b7368616861722e796f676576343740676d61696c2e636f6d3b2b3937323535393132343838353b3b3b3b49737261656c3beeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee").unwrap();
    #[rustfmt::skip]
    let expected_data = CardReadout { card_number: 8503953, card_type: Siac, start: Some(Normal(Punch { time: NaiveTime::from_str("11:57:10").unwrap(), day_of_week: Friday, week_counter: Third, code: 1 })), finish: Some(Normal(Punch { time: NaiveTime::from_str("11:57:21").unwrap(), day_of_week: Friday, week_counter: Second, code: 1 })), check: Some(Punch { time: NaiveTime::from_str("11:57:14").unwrap(), day_of_week: Friday, week_counter: Second, code: 1 }), punches: vec![] };
    assert_eq!(
        CardReadout::from_card_blocks(&mut data, Siac)
            .await
            .unwrap(),
        expected_data
    );
}

#[tokio::test]
async fn full() {
    let mut data = hex::decode("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0940259feaeaeaea1a01a84c2a01a8471b0101477f2680e20f81c29101175d835368616861723b596f6765763b3b3b4c6576204861736861726f6e3b7368616861722e796f676576343740676d61696c2e636f6d3b2b3937323535393132343838353b3b3b3b49737261656c3beeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee2a3fa84a2a43a84d2a3fa84f2a43a84d2a3fa8552a43a85a2a3fa85d2a43a85a2a3fa85d2a43a85a2a3fa85d2a43a85a2a3fa85d2a43a85a2a3fa85d2a43a85a2a3fa85d2a43a85a2a3fa85d2a43a85a2a3fa85d2a43a85a2a3fa85d2a43a85a2a3fa85d2a43a85a2a3fa85d2a43a85a2a3fa85d2a43a85a2a3fa85d2a43a85a2a3fa85d2a43a85a2a3fa85d2a43a85a2a3fa85d2b4300002b3f00032b4300002b3f00092b4300002b3f00092b4300002b3f00142b4300002b3f00142b4300002b3f00142b4300002b3f00142b4300002b3f00142b4300302b3f00142b4300302b3f00142b4300302b3f00142b4300432b3f00142b4300432b3f00142b4300432b3f00502b4300432b3f00552b4300582b3f00552b4300582b3f00552b4300582b3f00682b43006b2b3f006e2b43006b2b3f00742b43006b2b3f00742b43006b2b3f00742b43006b2b3f00742b43006b2b3f00742b43006b2b3f00742b43006b2b3f00742b43006b2b3f00742b43006b2b3f00742b43006b2b3f00742b4300a72b3f00742b4300ad2b3f00742b4300ad2b3f00b42b4300b72b3f00b92b4300b72b3f00b92b4300b72b3f00b92b4300b72b3f00c92b4300cc2b3f00cf2b4300cc2b3f00cf2b4300d72b3f00cf2b4300d72b3f00cf2b4300d72b3f00cf2b4300e62b3f00cf2b4300e62b3f00ee2b4300e62b3f00ee2b4300f62b3f00ee2b4300f6").unwrap();
    #[rustfmt::skip]
    let expected_data = CardReadout { card_number: 8503953, card_type: Siac, start: Some(Normal(Punch { time: NaiveTime::from_str("11:57:59").unwrap(), day_of_week: Friday, week_counter: Third, code: 1 })), finish: Some(Normal(Punch { time: NaiveTime::from_str("12:05:27").unwrap(), day_of_week: Friday, week_counter: Second, code: 1 })), check: Some(Punch { time: NaiveTime::from_str("11:58:04").unwrap(), day_of_week: Friday, week_counter: Second, code: 1 }), punches: vec![Punch { time: NaiveTime::from_str("11:58:02").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("11:58:05").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("11:58:07").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("11:58:05").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("11:58:13").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("11:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("11:58:21").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("11:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("11:58:21").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("11:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("11:58:21").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("11:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("11:58:21").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("11:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("11:58:21").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("11:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("11:58:21").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("11:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("11:58:21").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("11:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("11:58:21").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("11:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("11:58:21").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("11:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("11:58:21").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("11:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("11:58:21").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("11:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("11:58:21").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("11:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("11:58:21").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("11:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("11:58:21").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("11:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("11:58:21").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("11:58:18").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("11:58:21").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:00:00").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:00:03").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:00:00").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:00:09").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:00:00").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:00:09").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:00:00").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:00:20").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:00:00").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:00:20").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:00:00").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:00:20").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:00:00").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:00:20").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:00:00").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:00:20").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:00:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:00:20").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:00:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:00:20").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:00:48").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:00:20").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:01:07").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:00:20").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:01:07").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:00:20").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:01:07").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:01:20").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:01:07").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:01:25").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:01:28").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:01:25").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:01:28").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:01:25").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:01:28").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:01:44").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:01:47").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:01:50").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:01:47").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:01:56").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:01:47").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:01:56").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:01:47").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:01:56").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:01:47").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:01:56").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:01:47").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:01:56").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:01:47").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:01:56").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:01:47").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:01:56").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:01:47").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:01:56").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:01:47").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:01:56").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:01:47").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:01:56").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:02:47").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:01:56").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:02:53").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:01:56").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:02:53").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:03:00").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:03:03").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:03:05").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:03:03").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:03:05").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:03:03").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:03:05").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:03:03").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:03:21").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:03:24").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:03:27").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:03:24").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:03:27").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:03:35").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:03:27").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:03:35").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:03:27").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:03:35").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:03:27").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:03:50").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:03:27").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:03:50").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:03:58").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:03:50").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:03:58").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:04:06").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:03:58").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:04:06").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }] };

    assert_eq!(
        CardReadout::from_card_blocks(&mut data, Siac)
            .await
            .unwrap(),
        expected_data
    );
}

#[tokio::test]
async fn half_full() {
    let mut data = hex::decode("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0940259feaeaeaea1b010250eeeeeeee1b0104133f3540d70f81c29101175d835368616861723b596f6765763b3b3b4c6576204861736861726f6e3b7368616861722e796f676576343740676d61696c2e636f6d3b2b3937323535393132343838353b3b3b3b49737261656c3beeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee2b43026c2b3f028d2b4302b92b3f02bc2b4302b92b3f02bc2b4302b92b3f02bc2b4302b92b3f02bc2b4302b92b3f02bc2b4302b92b3f02bc2b4302b92b3f02bc2b4302b92b3f02bc2b4302b92b3f02bc2b4302b92b3f02bc2b4302b92b3f02bc2b4302fb2b3f032e2b4303312b3f032e2b4303312b3f033b2b4303312b3f033b2b4303432b3f03482b43034b2b3f03482b43034b2b3f03482b4303572b3f03592b43035c2b3f035e2b4303772b3f037a2b4303772b3f037a2b4303772b3f037a2b4303772b3f037a2b4303b72b3f03ba2b4303b72b3f03ba2b4303c92b3f03cb2b4303c92b3f03cb2b4303c92b3f03cb2b4303c92b3f03f12b4303f82b3f0401eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee").unwrap();
    #[rustfmt::skip]
    let expected_data = CardReadout { card_number: 8503953, card_type: Siac, start: None, finish: Some(Normal(Punch { time: NaiveTime::from_str("12:17:23").unwrap(), day_of_week: Friday, week_counter: Second, code: 1 })), check: Some(Punch { time: NaiveTime::from_str("12:09:52").unwrap(), day_of_week: Friday, week_counter: Second, code: 1 }), punches: vec![Punch { time: NaiveTime::from_str("12:10:20").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:10:53").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:11:37").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:11:40").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:11:37").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:11:40").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:11:37").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:11:40").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:11:37").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:11:40").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:11:37").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:11:40").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:11:37").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:11:40").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:11:37").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:11:40").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:11:37").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:11:40").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:11:37").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:11:40").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:11:37").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:11:40").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:11:37").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:11:40").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:12:43").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:13:34").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:13:37").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:13:34").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:13:37").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:13:47").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:13:37").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:13:47").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:13:55").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:14:00").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:14:03").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:14:00").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:14:03").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:14:00").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:14:15").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:14:17").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:14:20").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:14:22").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:14:47").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:14:50").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:14:47").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:14:50").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:14:47").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:14:50").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:14:47").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:14:50").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:15:51").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:15:54").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:15:51").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:15:54").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:16:09").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:16:11").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:16:09").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:16:11").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:16:09").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:16:11").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:16:09").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:16:49").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }, Punch { time: NaiveTime::from_str("12:16:56").unwrap(), day_of_week: Friday, week_counter: Third, code: 67 }, Punch { time: NaiveTime::from_str("12:17:05").unwrap(), day_of_week: Friday, week_counter: Third, code: 63 }] };
    assert_eq!(
        CardReadout::from_card_blocks(&mut data, Siac)
            .await
            .unwrap(),
        expected_data
    );
}

#[tokio::test]
async fn only_start() {
    let mut data = hex::decode("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0940259feaeaeaea1b0106642b01065eeeeeeeee00c400c40f81c29101175d835368616861723b596f6765763b3b3b4c6576204861736861726f6e3b7368616861722e796f676576343740676d61696c2e636f6d3b2b3937323535393132343838353b3b3b3b49737261656c3beeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee").unwrap();
    #[rustfmt::skip]
    let expected_data = CardReadout { card_number: 8503953, card_type: Siac, start: Some(Normal(Punch { time: NaiveTime::from_str("12:27:10").unwrap(), day_of_week: Friday, week_counter: Third, code: 1 })), finish: None, check: Some(Punch { time: NaiveTime::from_str("12:27:16").unwrap(), day_of_week: Friday, week_counter: Second, code: 1 }), punches: vec![] };
    assert_eq!(
        CardReadout::from_card_blocks(&mut data, Siac)
            .await
            .unwrap(),
        expected_data
    );
}

#[tokio::test]
async fn sub_second() {
    let mut data = hex::decode("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0940259feaeaeaea1b015a3c8b345a368bd95a3a00c400c40f81c29101175d835368616861723b596f6765763b3b3b4c6576204861736861726f6e3b7368616861722e796f676576343740676d61696c2e636f6d3b2b3937323535393132343838353b3b3b3b49737261656c3beeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee").unwrap();
    #[rustfmt::skip]
    let expected_data = CardReadout { card_number: 8503953, card_type: Siac, start: Some(SubSecond(SubSecondPunch { time: NaiveTime::from_str("18:24:54.203").unwrap(), day_of_week: Friday, week_counter: First })), finish: Some(SubSecond(SubSecondPunch { time: NaiveTime::from_str("18:24:58.850").unwrap(), day_of_week: Friday, week_counter: First })), check: Some(Punch { time: NaiveTime::from_str("18:25:00").unwrap(), day_of_week: Friday, week_counter: Second, code: 1 }), punches: vec![] };
    assert_eq!(
        CardReadout::from_card_blocks(&mut data, Siac)
            .await
            .unwrap(),
        expected_data
    );
}

#[tokio::test]
async fn empty_owner_data() {
    let mut data = hex::decode("0940259feaeaeaea1b015a3c8b345a368bd95a3a00c400c40f81c29101175d833b3b3b3b3b3b3b3b3b3b3bee3b3b3b4c6576204861736861726f6e3b7368616861722e796f676576343740676d61696c2e636f6d3b2b3937323535393132343838353b3b3b3b49737261656c3beeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0700eeee0300030004000400ebebebebeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0940259feaeaeaea1b015a3c8b345a368bd95a3a00c400c40f81c29101175d833b3b3b3b3b3b3b3b3b3b3bee3b3b3b4c6576204861736861726f6e3b7368616861722e796f676576343740676d61696c2e636f6d3b2b3937323535393132343838353b3b3b3b49737261656c3beeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee").unwrap();
    #[rustfmt::skip]
    let expected_data = CardOwnerData { first_name: "".to_string(), last_name: "".to_string(), gender: None, birthday: None, club: None, email: None, phone: None, city: None, street: None, zip: None, country: None };
    assert_eq!(
        CardOwnerData::from_card_blocks(&mut data, Siac)
            .await
            .unwrap(),
        expected_data
    );
}

#[tokio::test]
async fn normal_owner_data() {
    let mut data = hex::decode("0940259feaeaeaea1c026d48eeeeeeee0c1572eb132e147d0f81c29101175d83746573743b746573743b746573743b746573743b746573743b746573743b746573743b746573743b746573743b746573743b746573743bee323535393132343838353b3b3b3b49737261656c3beeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0700eeeeeeeeeeee04150415ebebebeb02000200020002000200020002000200020002000200020002000200020002000200020002000200eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0940259feaeaeaea1c026d48eeeeeeee0c1572eb132e147d0f81c29101175d83746573743b746573743b746573743b746573743b746573743b746573743b746573743b746573743b746573743b746573743b746573743bee323535393132343838353b3b3b3b49737261656c3beeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0c3d6f6d0c466f930c3c6fb10c506fdc0c4370110c3a70320c4270660c3170a70c3270ec0c2b71040c2671270c28714a0c4e71980c3e71b20c4871df0c4b71f70c2372341c1f72810c3e72b21c6472ddeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee").unwrap();
    #[rustfmt::skip]
    let expected_data = CardOwnerData { first_name: "test".to_string(), last_name: "test".to_string(), gender: Some("test".to_string()), birthday: Some("test".to_string()), club: Some("test".to_string()), email: Some("test".to_string()), phone: Some("test".to_string()), city: Some("test".to_string()), street: Some("test".to_string()), zip: Some("test".to_string()), country: Some("test".to_string()) };
    assert_eq!(
        CardOwnerData::from_card_blocks(&mut data, Siac)
            .await
            .unwrap(),
        expected_data
    );
}

#[tokio::test]
async fn full_owner_data() {
    let mut data = hex::decode("0940259feaeaeaea1c026d48eeeeeeee0c1572eb132e147d0f81c29101175d83746573747465733b74657374746573743b746573743b74657374746573743b746573747465737474657374746573743b74657374746573747465737474657374746573743b74657374746573743b74657374746573743b74657374746573747465737474657374746573743b74657374746573743b74657374746573743beeee0700eeeeeeeeeeee04150415ebebebeb02000200020002000200020002000200020002000200020002000200020002000200020002000200eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0940259feaeaeaea1c026d48eeeeeeee0c1572eb132e147d0f81c29101175d83746573747465733b74657374746573743b746573743b74657374746573743b746573747465737474657374746573743b74657374746573747465737474657374746573743b74657374746573743b74657374746573743b7465737474657374740c3d6f6d0c466f930c3c6fb10c506fdc0c4370110c3a70320c4270660c3170a70c3270ec0c2b71040c2671270c28714a0c4e71980c3e71b20c4871df0c4b71f70c2372341c1f72810c3e72b21c6472ddeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee").unwrap();
    #[rustfmt::skip]
    let expected_data = CardOwnerData { first_name: "testtes".to_string(), last_name: "testtest".to_string(), gender: Some("test".to_string()), birthday: Some("testtest".to_string()), club: Some("testtesttesttest".to_string()), email: Some("testtesttesttesttest".to_string()), phone: Some("testtest".to_string()), city: Some("testtest".to_string()), street: Some("testtesttesttesttest".to_string()), zip: Some("testtest".to_string()), country: Some("testtest".to_string()) };
    assert_eq!(
        CardOwnerData::from_card_blocks(&mut data, Siac)
            .await
            .unwrap(),
        expected_data
    );
}
